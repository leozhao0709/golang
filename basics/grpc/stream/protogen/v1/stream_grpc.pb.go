// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: v1/stream.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Greeter_ServerSendStream_FullMethodName    = "/Greeter/ServerSendStream"
	Greeter_ClientSendStream_FullMethodName    = "/Greeter/ClientSendStream"
	Greeter_BidirectionalStream_FullMethodName = "/Greeter/BidirectionalStream"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	ServerSendStream(ctx context.Context, in *StreamReqData, opts ...grpc.CallOption) (Greeter_ServerSendStreamClient, error)
	ClientSendStream(ctx context.Context, opts ...grpc.CallOption) (Greeter_ClientSendStreamClient, error)
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (Greeter_BidirectionalStreamClient, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) ServerSendStream(ctx context.Context, in *StreamReqData, opts ...grpc.CallOption) (Greeter_ServerSendStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], Greeter_ServerSendStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &greeterServerSendStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_ServerSendStreamClient interface {
	Recv() (*StreamResData, error)
	grpc.ClientStream
}

type greeterServerSendStreamClient struct {
	grpc.ClientStream
}

func (x *greeterServerSendStreamClient) Recv() (*StreamResData, error) {
	m := new(StreamResData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) ClientSendStream(ctx context.Context, opts ...grpc.CallOption) (Greeter_ClientSendStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[1], Greeter_ClientSendStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &greeterClientSendStreamClient{ClientStream: stream}
	return x, nil
}

type Greeter_ClientSendStreamClient interface {
	Send(*StreamReqData) error
	CloseAndRecv() (*StreamResData, error)
	grpc.ClientStream
}

type greeterClientSendStreamClient struct {
	grpc.ClientStream
}

func (x *greeterClientSendStreamClient) Send(m *StreamReqData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterClientSendStreamClient) CloseAndRecv() (*StreamResData, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (Greeter_BidirectionalStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[2], Greeter_BidirectionalStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &greeterBidirectionalStreamClient{ClientStream: stream}
	return x, nil
}

type Greeter_BidirectionalStreamClient interface {
	Send(*StreamReqData) error
	Recv() (*StreamResData, error)
	grpc.ClientStream
}

type greeterBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *greeterBidirectionalStreamClient) Send(m *StreamReqData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterBidirectionalStreamClient) Recv() (*StreamResData, error) {
	m := new(StreamResData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	ServerSendStream(*StreamReqData, Greeter_ServerSendStreamServer) error
	ClientSendStream(Greeter_ClientSendStreamServer) error
	BidirectionalStream(Greeter_BidirectionalStreamServer) error
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) ServerSendStream(*StreamReqData, Greeter_ServerSendStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerSendStream not implemented")
}
func (UnimplementedGreeterServer) ClientSendStream(Greeter_ClientSendStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientSendStream not implemented")
}
func (UnimplementedGreeterServer) BidirectionalStream(Greeter_BidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_ServerSendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReqData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).ServerSendStream(m, &greeterServerSendStreamServer{ServerStream: stream})
}

type Greeter_ServerSendStreamServer interface {
	Send(*StreamResData) error
	grpc.ServerStream
}

type greeterServerSendStreamServer struct {
	grpc.ServerStream
}

func (x *greeterServerSendStreamServer) Send(m *StreamResData) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_ClientSendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).ClientSendStream(&greeterClientSendStreamServer{ServerStream: stream})
}

type Greeter_ClientSendStreamServer interface {
	SendAndClose(*StreamResData) error
	Recv() (*StreamReqData, error)
	grpc.ServerStream
}

type greeterClientSendStreamServer struct {
	grpc.ServerStream
}

func (x *greeterClientSendStreamServer) SendAndClose(m *StreamResData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterClientSendStreamServer) Recv() (*StreamReqData, error) {
	m := new(StreamReqData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).BidirectionalStream(&greeterBidirectionalStreamServer{ServerStream: stream})
}

type Greeter_BidirectionalStreamServer interface {
	Send(*StreamResData) error
	Recv() (*StreamReqData, error)
	grpc.ServerStream
}

type greeterBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *greeterBidirectionalStreamServer) Send(m *StreamResData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterBidirectionalStreamServer) Recv() (*StreamReqData, error) {
	m := new(StreamReqData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerSendStream",
			Handler:       _Greeter_ServerSendStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientSendStream",
			Handler:       _Greeter_ClientSendStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStream",
			Handler:       _Greeter_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/stream.proto",
}
